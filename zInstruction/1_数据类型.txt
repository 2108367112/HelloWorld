1、基本数据类型：
1、int, short ,long ,long long ,bool ,char ,float 和 double
2 、数据类型的修饰符：unsigned ,signed (无符号 和 有符号)
3 、每种 数据类型 在内存中占用的最少字节数。如何计算每种数据类型占用多少字节？？例如：sizeof(int)

由于C++和硬件平台关联较大，规范没办法像Java那样严格规定每种数据类型所需的字节数，所以它只定义了每种数据类型最少需要多少字节。
比如，规范要求一个int型整数至少占据2个字节（不过，绝大部分情况下一个int整数将占据4个字节）。

C++定义了sizeof操作符，通过这个操作符可以得到每种数据类型（或某个变量）占据的字节个数。

对于浮点数，规范只要求最小的有效数字个数。对于单精度浮点数float而言，要求最少支持6个有效数字。对于双精度浮点数double类型而言，
要求最少支持10个有效数字。

2、指针、引用和void

现在来看C++里另外三种常用的数据类型：指针、引用和void，如图3所示

2.1 指针类型的书写格式为T *，其中T为某种数据类型。
2.2 引用类型的书写格式为T &，其中T为某种数据类型。
2.3 void代表空类型，也就是无类型。这种类型只能用于定义指针变量，比如void*。当我们确实不关注内存中存储的数据到底是什么类型的话，
就可以定义一个void*类型的指针来指向这块内存。
2.4 C++11开始，空指针由新关键字nullptr[④]表示，类似于Java中的null。

如何理解指针、引用、void ？？是把它们理解成数据类型，还是变量？？

答：数据类型。通常会说，指针变量，引用变量。我们会认为它应该是变量。确切的说，我们应该说：(指针类型的)变量。(引用类型的)变量。

例如：int *userID=0x10; 其中：变量是:userID,而int 是指针指向的数据类型。

void 只能修饰函数返回值，或者 修饰指针。

关于指针：

指针的类型。
指针的赋值。
指针的解引用。

简单点说，指针就是内存地址

指针的使用：1、既然米字符号代表的是一种类型，那么我们在使用这个变量时，还需要带米字符号吗？？

          2、给指针赋值  和 通过指针获取内容。

          1、直接将一个固定的值（比如0x123456）作为地址赋给指针变量。这种做法很危险。除非明确知道这块内存的作用以及所存储的内容，否则不能使用这种方法。
          2、通过new操作符在堆上分配一块内存，该内存的地址存储在对应的指针变量中。
          3、通过取地址符&对获取某个变量或者函数的地址


          （3）  指针的解引用
          指针只是代表内存的某个地址，如何获取该地址对应内存中的内容呢？C++提供了解指针引用符号*来帮助大家 (草，既然也用米字符号)

          3.1 对于数据类型的指针，解引用意味着获取对应地址中内存的内容。
          3.2 对于函数指针，解引用意味着调用这个函数。

理解函数指针


引用变量的定义形式

int &aliaX=10;(这种写法是错误的)

1、引用只是变量的别名。由于是别名，所以C++要求在定义引用型变量时就必须将它和实际变量绑定。
2、引用型变量绑定实际变量之后，这两个变量（原变量和它的引用变量）其实就代表同一个东西了。图7中（1）以鲁迅为例，“鲁迅”和“周树人”都是同一个人。


c++ 对变量的形容 const  其实类似于java 中的final



字符 和 字符串

char a='C';

C++中如何定义一个字符串呢？？？

数组


类 class

类也是一种数据类型








